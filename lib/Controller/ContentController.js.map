{"version":3,"sources":["../../src/Controller/ContentController.js"],"names":["ContentController","constructor","args","logger","Logger","start","callback","event","progress","Promise","resolve","reject","output","doesFolderExist","contentService","ContentService","on","report","toLog","verbose","console","log","toString"],"mappings":";;;;;;;AACA;;AAEA;;AACA;;;;AAEA,MAAMA,iBAAN,CAAwB;AAItBC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACtB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,IAAIC,eAAJ,CAAWF,IAAX,CAAd;AACD;;AAEDG,EAAAA,KAAK,GAA8D;AAAA,QAA7DC,QAA6D,uEAAxC,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE,CAAiB;AACjE,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKT,IAAL,CAAUU,MAAV,CAAiBC,eAAjB;AACA,UAAIC,cAAc,GAAG,IAAIC,uBAAJ,CAAmB,KAAKb,IAAxB,CAArB;AACAY,MAAAA,cAAc,CACXE,EADH,CACM,OADN,EACeR,QAAQ,IAAI;AACvBF,QAAAA,QAAQ,CAAC,OAAD,EAAUE,QAAV,CAAR;AACA,aAAKL,MAAL,CAAYc,MAAZ,CAAmBT,QAAQ,CAACU,KAAT,EAAnB;;AACA,YAAI,KAAKhB,IAAL,CAAUiB,OAAd,EAAuB;AACrBC,UAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,QAAT,EAAZ;AACD;AACF,OAPH,EAQGN,EARH,CAQM,UARN,EAQkBR,QAAQ,IAAI;AAC1BF,QAAAA,QAAQ,CAAC,UAAD,EAAaE,QAAb,CAAR;AACA,aAAKL,MAAL,CAAYc,MAAZ,CAAmBT,QAAQ,CAACU,KAAT,EAAnB;;AACA,YAAI,KAAKhB,IAAL,CAAUiB,OAAd,EAAuB;AACrBC,UAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,QAAT,EAAZ;AACD;AACF,OAdH,EAeGN,EAfH,CAeM,UAfN,EAekBR,QAAQ,IAAI;AAC1BF,QAAAA,QAAQ,CAAC,UAAD,EAAaE,QAAb,CAAR;AACA,aAAKL,MAAL,CAAYc,MAAZ,CAAmBT,QAAQ,CAACU,KAAT,EAAnB;;AACA,YAAI,KAAKhB,IAAL,CAAUiB,OAAd,EAAuB;AACvBC,UAAAA,OAAO,CAACC,GAAR,CAAYb,QAAQ,CAACc,QAAT,EAAZ;AACC;;AACDZ,QAAAA,OAAO;AACR,OAtBH;AAuBAI,MAAAA,cAAc,CAACT,KAAf;AACD,KA3BM,CAAP;AA4BD;;AAtCqB;;eAyCTL,iB","sourcesContent":["// @flow\nimport ContentService from \"../Service/ContentService\";\n\nimport Logger from \"../Utility/Logger\";\nimport Args from \"../Model/Args\";\n\nclass ContentController {\n  args: Args;\n  logger: Logger;\n\n  constructor(args: Args) {\n    this.args = args;\n    this.logger = new Logger(args);\n  }\n\n  start(callback: function = (event, progress) => {}): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.args.output.doesFolderExist();\n      let contentService = new ContentService(this.args);\n      contentService\n        .on(\"start\", progress => {\n          callback('start', progress);\n          this.logger.report(progress.toLog());\n          if (this.args.verbose) {\n            console.log(progress.toString());\n          }\n        })\n        .on(\"progress\", progress => {\n          callback('progress', progress);\n          this.logger.report(progress.toLog());\n          if (this.args.verbose) {\n            console.log(progress.toString());\n          }\n        })\n        .on(\"complete\", progress => {\n          callback('complete', progress);\n          this.logger.report(progress.toLog());\n          if (this.args.verbose) {\n          console.log(progress.toString());\n          }\n          resolve();\n        });\n      contentService.start();\n    });\n  }\n}\n\nexport default ContentController;\n"],"file":"ContentController.js"}