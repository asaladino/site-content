{"version":3,"sources":["../../src/Service/ContentService.js"],"names":["ContentService","constructor","args","events","Map","start","urlsRepository","UrlsRepository","htmlRepository","HtmlRepository","getProjectPath","contentRepository","ContentRepository","crawlStatesRepository","SqliteCrawlStatesRepository","urls","findAll","filter","url","getProjectsContentFolder","name","progress","Progress","length","emitStart","forEach","html","read","data","save","then","update","title","text","emitProgress","emitComplete","on","event","callback","set"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;;;AAEA;;;AAGe,MAAMA,cAAN,CAAqB;AAIhC;;;AAGAC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACH;AAED;;;;;AAGAC,EAAAA,KAAK,GAAG;AACJ,QAAIC,cAAc,GAAG,IAAIC,uBAAJ,CAAmB,KAAKL,IAAxB,CAArB;AACA,QAAIM,cAAc,GAAG,IAAIC,uBAAJ,CAAmB,KAAKP,IAAL,CAAUQ,cAAV,EAAnB,CAArB;AACA,QAAIC,iBAAiB,GAAG,IAAIC,0BAAJ,CAAsB,KAAKV,IAAL,CAAUQ,cAAV,EAAtB,CAAxB;AACA,QAAIG,qBAAqB,GAAG,IAAIC,oCAAJ,CAAgC,KAAKZ,IAAL,CAAUQ,cAAV,EAAhC,CAA5B;AAEA,QAAIK,IAAI,GAAGT,cAAc,CAACU,OAAf,GAAyBC,MAAzB,CAAgCC,GAAG,IAAI;AAC9C,aAAO,CAAC,oBACJ,gBAAKP,iBAAiB,CAACQ,wBAAlB,EAAL,EAAmDD,GAAG,CAACE,IAAJ,GAAW,OAA9D,CADI,CAAR;AAGH,KAJU,CAAX;AAKA,QAAIC,QAAQ,GAAG,IAAIC,iBAAJ,CAAa,IAAb,EAAmBP,IAAI,CAACQ,MAAxB,CAAf;AAEA,SAAKC,SAAL,CAAeH,QAAf;AACAN,IAAAA,IAAI,CAACU,OAAL,CAAaP,GAAG,IAAI;AAChB,UAAMQ,IAAI,GAAGlB,cAAc,CAACmB,IAAf,CAAoBT,GAApB,CAAb;AACA,UAAIU,IAAI,GAAG,sBAAUF,IAAV,CAAX;AACAf,MAAAA,iBAAiB,CAACkB,IAAlB,CAAuBX,GAAvB,EAA4BU,IAA5B,EAAkCE,IAAlC;;AACAhB,2CAA4BiB,MAA5B,CAAmCb,GAAG,CAACE,IAAvC,EAA6CQ,IAAI,CAACI,KAAlD,EAAyDJ,IAAI,CAACK,IAA9D;;AACAZ,MAAAA,QAAQ,CAACU,MAAT,CAAgBb,GAAhB;AACA,WAAKgB,YAAL,CAAkBb,QAAlB;AACH,KAPD;AAQAA,IAAAA,QAAQ,CAACU,MAAT,CAAgB,IAAhB;AACA,SAAKI,YAAL,CAAkBd,QAAlB;AACH;AAED;;;;;;;;AAMAe,EAAAA,EAAE,CAACC,KAAD,EAAgBC,QAAhB,EAAwE;AACtE,SAAKnC,MAAL,CAAYoC,GAAZ,CAAgBF,KAAhB,EAAuBC,QAAvB;AACA,WAAO,IAAP;AACH;AAED;;;;;;AAIAd,EAAAA,SAAS,CAACH,QAAD,EAAqB;AAC1B,SAAKlB,MAAL,CAAYsB,OAAZ,CAAoB,CAACa,QAAD,EAAWD,KAAX,KAAqB;AACrC,UAAIA,KAAK,KAAK,OAAd,EAAuB;AACnBC,QAAAA,QAAQ,CAACjB,QAAD,CAAR;AACH;AACJ,KAJD;AAKH;AAED;;;;;;AAIAa,EAAAA,YAAY,CAACb,QAAD,EAAqB;AAC7B,SAAKlB,MAAL,CAAYsB,OAAZ,CAAoB,CAACa,QAAD,EAAWD,KAAX,KAAqB;AACrC,UAAIA,KAAK,KAAK,UAAd,EAA0B;AACtBC,QAAAA,QAAQ,CAACjB,QAAD,CAAR;AACH;AACJ,KAJD;AAKH;AAED;;;;;;AAIAc,EAAAA,YAAY,CAACd,QAAD,EAAqB;AAC7B,SAAKlB,MAAL,CAAYsB,OAAZ,CAAoB,CAACa,QAAD,EAAWD,KAAX,KAAqB;AACrC,UAAIA,KAAK,KAAK,UAAd,EAA0B;AACtBC,QAAAA,QAAQ,CAACjB,QAAD,CAAR;AACH;AACJ,KAJD;AAKH;;AAtF+B","sourcesContent":["// @flow\nimport UrlsRepository from \"../Repository/UrlsRepository\";\nimport HtmlRepository from \"../Repository/HtmlRepository\";\nimport ContentRepository from \"../Repository/ContentRepository\";\n\nimport {existsSync} from \"fs\";\nimport {join} from \"path\";\n\nimport Args from \"../Model/Args\";\nimport Progress from \"../Model/Progress\";\n\nimport extractor from \"unfluff\";\nimport SqliteCrawlStatesRepository from \"../Repository/SqliteCrawlStatesRepository\";\n\n/**\n * This service extracts all the content from the sites crawled html.\n */\nexport default class ContentService {\n    args: Args;\n    events: Map<string, (progress: Progress) => void>;\n\n    /**\n     * Build the content service.\n     */\n    constructor(args: Args) {\n        this.args = args;\n        this.events = new Map();\n    }\n\n    /**\n     * Start the content extraction.\n     */\n    start() {\n        let urlsRepository = new UrlsRepository(this.args);\n        let htmlRepository = new HtmlRepository(this.args.getProjectPath());\n        let contentRepository = new ContentRepository(this.args.getProjectPath());\n        let crawlStatesRepository = new SqliteCrawlStatesRepository(this.args.getProjectPath());\n\n        let urls = urlsRepository.findAll().filter(url => {\n            return !existsSync(\n                join(contentRepository.getProjectsContentFolder(), url.name + \".json\")\n            );\n        });\n        let progress = new Progress(null, urls.length);\n\n        this.emitStart(progress);\n        urls.forEach(url => {\n            const html = htmlRepository.read(url);\n            let data = extractor(html);\n            contentRepository.save(url, data).then();\n            SqliteCrawlStatesRepository.update(url.name, data.title, data.text);\n            progress.update(url);\n            this.emitProgress(progress);\n        });\n        progress.update(null);\n        this.emitComplete(progress);\n    }\n\n    /**\n     * Receive event information.\n     * @param event {string} name of the event. (start, progress, and complete)\n     * @param callback {Function} called when the event is emitted.\n     * @returns {ContentService} for chaining.\n     */\n    on(event: string, callback: (progress: Progress) => void): ContentService {\n        this.events.set(event, callback);\n        return this;\n    }\n\n    /**\n     * Emits that start event.\n     * @param progress {Progress} where we at.\n     */\n    emitStart(progress: Progress) {\n        this.events.forEach((callback, event) => {\n            if (event === \"start\") {\n                callback(progress);\n            }\n        });\n    }\n\n    /**\n     * Emits that progress event.\n     * @param progress {Progress} where we at.\n     */\n    emitProgress(progress: Progress) {\n        this.events.forEach((callback, event) => {\n            if (event === \"progress\") {\n                callback(progress);\n            }\n        });\n    }\n\n    /**\n     * Emits that complete event when service has finished.\n     * @param progress {Progress} where we at.\n     */\n    emitComplete(progress: Progress) {\n        this.events.forEach((callback, event) => {\n            if (event === \"complete\") {\n                callback(progress);\n            }\n        });\n    }\n}\n"],"file":"ContentService.js"}