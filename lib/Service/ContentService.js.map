{"version":3,"sources":["../../src/Service/ContentService.js"],"names":["ContentService","constructor","args","events","Map","start","urlsRepository","UrlsRepository","htmlRepository","HtmlRepository","getProjectPath","contentRepository","ContentRepository","urls","findAll","filter","url","getProjectsContentFolder","name","progress","Progress","length","emitStart","forEach","html","read","data","save","then","update","emitProgress","emitComplete","on","event","callback","set"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AAEA;;;;AAEA;;;AAGA,MAAMA,cAAN,CAAqB;AACnB;;;;AAIAC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACD;AAED;;;;;AAGAC,EAAAA,KAAK,GAAG;AACN,QAAIC,cAAc,GAAG,IAAIC,uBAAJ,CAAmB,KAAKL,IAAxB,CAArB;AACA,QAAIM,cAAc,GAAG,IAAIC,uBAAJ,CAAmB,KAAKP,IAAL,CAAUQ,cAAV,EAAnB,CAArB;AACA,QAAIC,iBAAiB,GAAG,IAAIC,0BAAJ,CAAsB,KAAKV,IAAL,CAAUQ,cAAV,EAAtB,CAAxB;AAEA,QAAIG,IAAI,GAAGP,cAAc,CAACQ,OAAf,GAAyBC,MAAzB,CAAgCC,GAAG,IAAI;AAChD,aAAO,CAAC,oBACN,gBAAKL,iBAAiB,CAACM,wBAAlB,EAAL,EAAmDD,GAAG,CAACE,IAAJ,GAAW,OAA9D,CADM,CAAR;AAGD,KAJU,CAAX;AAKA,QAAIC,QAAQ,GAAG,IAAIC,iBAAJ,CAAa,IAAb,EAAmBP,IAAI,CAACQ,MAAxB,CAAf;AAEA,SAAKC,SAAL,CAAeH,QAAf;AACAN,IAAAA,IAAI,CAACU,OAAL,CAAaP,GAAG,IAAI;AAClB,YAAMQ,IAAI,GAAGhB,cAAc,CAACiB,IAAf,CAAoBT,GAApB,CAAb;AACA,UAAIU,IAAI,GAAG,sBAAUF,IAAV,CAAX;AACAb,MAAAA,iBAAiB,CAACgB,IAAlB,CAAuBX,GAAvB,EAA4BU,IAA5B,EAAkCE,IAAlC;AACAT,MAAAA,QAAQ,CAACU,MAAT,CAAgBb,GAAhB;AACA,WAAKc,YAAL,CAAkBX,QAAlB;AACD,KAND;AAOAA,IAAAA,QAAQ,CAACU,MAAT,CAAgB,IAAhB;AACA,SAAKE,YAAL,CAAkBZ,QAAlB;AACD;AAED;;;;;;;;AAMAa,EAAAA,EAAE,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAClB,SAAK/B,MAAL,CAAYgC,GAAZ,CAAgBF,KAAhB,EAAuBC,QAAvB;AACA,WAAO,IAAP;AACD;AAED;;;;;;AAIAZ,EAAAA,SAAS,CAACH,QAAD,EAAW;AAClB,SAAKhB,MAAL,CAAYoB,OAAZ,CAAoB,CAACW,QAAD,EAAWD,KAAX,KAAqB;AACvC,UAAIA,KAAK,KAAK,OAAd,EAAuB;AACrBC,QAAAA,QAAQ,CAACf,QAAD,CAAR;AACD;AACF,KAJD;AAKD;AAED;;;;;;AAIAW,EAAAA,YAAY,CAACX,QAAD,EAAW;AACrB,SAAKhB,MAAL,CAAYoB,OAAZ,CAAoB,CAACW,QAAD,EAAWD,KAAX,KAAqB;AACvC,UAAIA,KAAK,KAAK,UAAd,EAA0B;AACxBC,QAAAA,QAAQ,CAACf,QAAD,CAAR;AACD;AACF,KAJD;AAKD;AAED;;;;;;AAIAY,EAAAA,YAAY,CAACZ,QAAD,EAAW;AACrB,SAAKhB,MAAL,CAAYoB,OAAZ,CAAoB,CAACW,QAAD,EAAWD,KAAX,KAAqB;AACvC,UAAIA,KAAK,KAAK,UAAd,EAA0B;AACxBC,QAAAA,QAAQ,CAACf,QAAD,CAAR;AACD;AACF,KAJD;AAKD;;AAlFkB;;eAqFNnB,c","sourcesContent":["import UrlsRepository from \"../Repository/UrlsRepository\";\nimport HtmlRepository from \"../Repository/HtmlRepository\";\nimport ContentRepository from \"../Repository/ContentRepository\";\n\nimport { existsSync } from \"fs\";\nimport { join } from \"path\";\n\nimport Args from \"../Model/Args\";\nimport Progress from \"../Model/Progress\";\n\nimport extractor from \"unfluff\";\n\n/**\n * This service extracts all the content from the sites crawled html.\n */\nclass ContentService {\n  /**\n   * Build the content service.\n   * @param args {Args} passed from the command-line.\n   */\n  constructor(args) {\n    this.args = args;\n    this.events = new Map();\n  }\n\n  /**\n   * Start the content extraction.\n   */\n  start() {\n    let urlsRepository = new UrlsRepository(this.args);\n    let htmlRepository = new HtmlRepository(this.args.getProjectPath());\n    let contentRepository = new ContentRepository(this.args.getProjectPath());\n\n    let urls = urlsRepository.findAll().filter(url => {\n      return !existsSync(\n        join(contentRepository.getProjectsContentFolder(), url.name + \".json\")\n      );\n    });\n    let progress = new Progress(null, urls.length);\n\n    this.emitStart(progress);\n    urls.forEach(url => {\n      const html = htmlRepository.read(url);\n      let data = extractor(html);\n      contentRepository.save(url, data).then();\n      progress.update(url);\n      this.emitProgress(progress);\n    });\n    progress.update(null);\n    this.emitComplete(progress);\n  }\n\n  /**\n   * Receive event information.\n   * @param event {string} name of the event. (start, progress, and complete)\n   * @param callback {Function} called when the event is emitted.\n   * @returns {ContentService} for chaining.\n   */\n  on(event, callback) {\n    this.events.set(event, callback);\n    return this;\n  }\n\n  /**\n   * Emits that start event.\n   * @param progress {Progress} where we at.\n   */\n  emitStart(progress) {\n    this.events.forEach((callback, event) => {\n      if (event === \"start\") {\n        callback(progress);\n      }\n    });\n  }\n\n  /**\n   * Emits that progress event.\n   * @param progress {Progress} where we at.\n   */\n  emitProgress(progress) {\n    this.events.forEach((callback, event) => {\n      if (event === \"progress\") {\n        callback(progress);\n      }\n    });\n  }\n\n  /**\n   * Emits that complete event when service has finished.\n   * @param progress {Progress} where we at.\n   */\n  emitComplete(progress) {\n    this.events.forEach((callback, event) => {\n      if (event === \"complete\") {\n        callback(progress);\n      }\n    });\n  }\n}\n\nexport default ContentService;\n"],"file":"ContentService.js"}