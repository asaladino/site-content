{"version":3,"sources":["../../src/Repository/UrlsRepository.js"],"names":["UrlsRepository","constructor","args","findAll","urlsFile","getProjectPath","JSON","parse","toString","map","entry","Url"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,cAAN,CAAqB;AAChC;;;;AAKA;;;AAGAC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACH;AAED;;;;;;AAIAC,EAAAA,OAAO,GAAU;AACb,QAAIC,QAAQ,GAAG,gBAAK,KAAKF,IAAL,CAAUG,cAAV,EAAL,EAAiC,MAAjC,EAAyC,WAAzC,CAAf;AACA,WAAOC,IAAI,CAACC,KAAL,CAAW,sBAAaH,QAAb,EAAuBI,QAAvB,EAAX,EAA8CC,GAA9C,CACHC,KAAK,IAAI,IAAIC,YAAJ,CAAQD,KAAR,CADN,CAAP;AAGH;;AAtB+B","sourcesContent":["// @flow\nimport {readFileSync} from \"fs\";\nimport Url from \"../Model/Url\";\nimport Args from \"../Model/Args\";\nimport {join} from \"path\";\n\n/**\n * Retrieve all the urls for the domain.\n */\nexport default class UrlsRepository {\n    /**\n     * Passed from the command-line.\n     */\n    args: Args;\n\n    /**\n     * Build the url repository.\n     */\n    constructor(args: Args) {\n        this.args = args;\n    }\n\n    /**\n     * Find all urls.\n     * @returns {[Url]} from the domain.\n     */\n    findAll(): Url[] {\n        let urlsFile = join(this.args.getProjectPath(), \"urls\", \"urls.json\");\n        return JSON.parse(readFileSync(urlsFile).toString()).map(\n            entry => new Url(entry)\n        );\n    }\n}\n"],"file":"UrlsRepository.js"}