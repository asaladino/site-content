{"version":3,"sources":["../../src/Repository/UrlsRepository.js"],"names":["UrlsRepository","constructor","args","findAll","urlsFile","getProjectPath","JSON","parse","toString","map","entry","Url"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;;AAGA,MAAMA,cAAN,CAAqB;AAEjB;;;;AAIAC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;AAED;;;;;;AAIAC,EAAAA,OAAO,GAAG;AACN,QAAIC,QAAQ,GAAG,gBAAK,KAAKF,IAAL,CAAUG,cAAV,EAAL,EAAiC,MAAjC,EAAyC,WAAzC,CAAf;AACA,WAAOC,IAAI,CAACC,KAAL,CAAW,sBAAaH,QAAb,EAAuBI,QAAvB,EAAX,EAA8CC,GAA9C,CAAkDC,KAAK,IAAI,IAAIC,YAAJ,CAAQD,KAAR,CAA3D,CAAP;AACH;;AAjBgB;;eAoBNV,c","sourcesContent":["import { readFileSync } from 'fs';\nimport Url from '../Model/Url';\nimport Args from '../Model/Args';\nimport { join } from \"path\";\n\n/**\n * Retrieve all the urls for the domain.\n */\nclass UrlsRepository {\n\n    /**\n     * Build the url repo.\n     * @param args {Args} passed from the commandline.\n     */\n    constructor(args) {\n        this.args = args;\n    }\n\n    /**\n     * Find all urls.\n     * @returns {[Url]} from the domain.\n     */\n    findAll() {\n        let urlsFile = join(this.args.getProjectPath(), 'urls', 'urls.json');\n        return JSON.parse(readFileSync(urlsFile).toString()).map(entry => new Url(entry));\n    }\n}\n\nexport default UrlsRepository;"],"file":"UrlsRepository.js"}