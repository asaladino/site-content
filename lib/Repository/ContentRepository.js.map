{"version":3,"sources":["../../src/Repository/ContentRepository.js"],"names":["ContentRepository","constructor","projectFolder","save","url","content","file","getProjectsContentFolder","name","Promise","resolve","reject","JSON","stringify","error","projectsPathHtml"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;AAGA,MAAMA,iBAAN,CAAwB;AAEpB;;;;AAIAC,EAAAA,WAAW,CAACC,aAAD,EAAgB;AACvB;;;;AAIA,SAAKA,aAAL,GAAqBA,aAArB;AACH;AAED;;;;;;;;AAMAC,EAAAA,IAAI,CAACC,GAAD,EAAMC,OAAN,EAAe;AACf,UAAMC,IAAI,GAAG,gBAAK,KAAKC,wBAAL,EAAL,EAAsCH,GAAG,CAACI,IAAJ,GAAW,OAAjD,CAAb;AACA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,6BAAcL,IAAd,EAAoBM,IAAI,CAACC,SAAL,CAAeR,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAApB,EAAsD,UAAUS,KAAV,EAAiB;AACnEH,QAAAA,MAAM,CAACG,KAAD,CAAN;AACH,OAFD;AAGAJ,MAAAA,OAAO;AACV,KALM,CAAP;AAMH;AAED;;;;;;AAIAH,EAAAA,wBAAwB,GAAG;AACvB,QAAIQ,gBAAgB,GAAG,gBAAK,KAAKb,aAAV,EAAyB,SAAzB,CAAvB;;AACA,QAAI,CAAC,oBAAWa,gBAAX,CAAL,EAAmC;AAC/B,yBAAUA,gBAAV;AACH;;AACD,WAAOA,gBAAP;AACH;;AAxCmB;;eA2CTf,iB","sourcesContent":["import { writeFileSync, existsSync, mkdirSync } from 'fs';\nimport Url from '../Model/Url';\nimport { join } from \"path\";\n\n/**\n * Save the url html to file.\n */\nclass ContentRepository {\n\n    /**\n     * Build a json url repo.\n     * @param projectFolder {string}\n     */\n    constructor(projectFolder) {\n        /**\n         * Location to the html folder in the project.\n         * @type {string}\n         */\n        this.projectFolder = projectFolder;\n    }\n\n    /**\n     * Save json to a file.\n     * @param url {Url}\n     * @param content {*}\n     * @returns {Promise}\n     */\n    save(url, content) {\n        const file = join(this.getProjectsContentFolder(), url.name + '.json');\n        return new Promise((resolve, reject) => {\n            writeFileSync(file, JSON.stringify(content, null, 2), function (error) {\n                reject(error);\n            });\n            resolve();\n        });\n    }\n\n    /**\n     * Creates the html folder in the project if it doesn't exist.\n     * @returns {string} for the html folder.\n     */\n    getProjectsContentFolder() {\n        let projectsPathHtml = join(this.projectFolder, 'content');\n        if (!existsSync(projectsPathHtml)) {\n            mkdirSync(projectsPathHtml);\n        }\n        return projectsPathHtml;\n    }\n}\n\nexport default ContentRepository;"],"file":"ContentRepository.js"}