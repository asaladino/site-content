{"version":3,"sources":["../../src/Repository/HtmlRepository.js"],"names":["HtmlRepository","constructor","projectFolder","read","url","file","getProjectsHtmlFolder","name","toString","projectsPathHtml"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,cAAN,CAAqB;AAChC;;;;AAKA;;;AAGAC,EAAAA,WAAW,CAACC,aAAD,EAAwB;AAC/B,SAAKA,aAAL,GAAqBA,aAArB;AACH;AAED;;;;;AAGAC,EAAAA,IAAI,CAACC,GAAD,EAAmB;AACnB,QAAMC,IAAI,GAAG,gBAAK,KAAKC,qBAAL,EAAL,EAAmCF,GAAG,CAACG,IAAJ,GAAW,OAA9C,CAAb;AACA,WAAO,sBAAaF,IAAb,EAAmBG,QAAnB,EAAP;AACH;AAED;;;;;;AAIAF,EAAAA,qBAAqB,GAAW;AAC5B,QAAIG,gBAAgB,GAAG,gBAAK,KAAKP,aAAV,EAAyB,MAAzB,CAAvB;;AACA,QAAI,CAAC,oBAAWO,gBAAX,CAAL,EAAmC;AAC/B,yBAAUA,gBAAV;AACH;;AACD,WAAOA,gBAAP;AACH;;AA/B+B","sourcesContent":["// @flow\nimport {readFileSync, existsSync, mkdirSync} from \"fs\";\nimport Url from \"../Model/Url\";\nimport {join} from \"path\";\n\n/**\n * Save the url html to file.\n */\nexport default class HtmlRepository {\n    /**\n     * Location to the html folder in the project.\n     */\n    projectFolder: string;\n\n    /**\n     * Build a json url repository.\n     */\n    constructor(projectFolder: string) {\n        this.projectFolder = projectFolder;\n    }\n\n    /**\n     * Reads html for the url.\n     */\n    read(url: Url): string {\n        const file = join(this.getProjectsHtmlFolder(), url.name + \".html\");\n        return readFileSync(file).toString();\n    }\n\n    /**\n     * Creates the html folder in the project if it doesn't exist.\n     * @returns {string} for the html folder.\n     */\n    getProjectsHtmlFolder(): string {\n        let projectsPathHtml = join(this.projectFolder, \"html\");\n        if (!existsSync(projectsPathHtml)) {\n            mkdirSync(projectsPathHtml);\n        }\n        return projectsPathHtml;\n    }\n}\n"],"file":"HtmlRepository.js"}