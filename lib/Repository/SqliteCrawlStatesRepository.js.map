{"version":3,"sources":["../../src/Repository/SqliteCrawlStatesRepository.js"],"names":["Op","Sequelize","Url","Model","SqliteCrawlStatesRepository","constructor","projectFolder","projectsPathUrls","databaseFile","fs","existsSync","sequelize","logging","init","name","STRING","url","title","contents","modelName","tableName","timestamps","update","where","search","criteria","likes","split","map","term","like","page","parseInt","limit","findAndCountAll","attributes","offset","or"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,EAAE,GAAGC,qBAAUD,EAArB;;AAEA,MAAME,GAAN,SAAkBD,qBAAUE,KAA5B,CAAkC;AAGlC;;;;;AAGe,MAAMC,2BAAN,CAAkC;AAE7CC,EAAAA,WAAW,CAACC,aAAD,EAAwB;AAC/B,QAAMC,gBAAgB,GAAG,gBAAKD,aAAL,EAAoB,MAApB,CAAzB;AACA,QAAME,YAAY,GAAG,gBAAKD,gBAAL,EAAuB,oBAAvB,CAArB;;AACA,QAAG,CAACE,YAAGC,UAAH,CAAcF,YAAd,CAAJ,EAAiC;AAC7B,YAAM,qBAAN;AACH;;AAED,QAAMG,SAAS,GAAG,IAAIV,oBAAJ,kBAAwBO,YAAxB,GAAwC;AAACI,MAAAA,OAAO,EAAE;AAAV,KAAxC,CAAlB;AAEAV,IAAAA,GAAG,CAACW,IAAJ,CAAS;AACLC,MAAAA,IAAI,EAAEb,qBAAUc,MADX;AAELC,MAAAA,GAAG,EAAEf,qBAAUc,MAFV;AAGLE,MAAAA,KAAK,EAAEhB,qBAAUc,MAHZ;AAILG,MAAAA,QAAQ,EAAEjB,qBAAUc;AAJf,KAAT,EAKG;AAACJ,MAAAA,SAAD;AAAYQ,MAAAA,SAAS,EAAE,KAAvB;AAA8BC,MAAAA,SAAS,EAAE,MAAzC;AAAiDC,MAAAA,UAAU,EAAE;AAA7D,KALH;AAMH,GAjB4C,CAmB7C;;AACA;;;;;AAGAC,EAAAA,MAAM,CAACR,IAAD,EAAeG,KAAf,EAA8BC,QAA9B,EAAgD;AAClDhB,IAAAA,GAAG,CAACoB,MAAJ,CAAW;AACPL,MAAAA,KAAK,EAAEA,KADA;AAEPC,MAAAA,QAAQ,EAAEA;AAFH,KAAX,EAGG;AACCK,MAAAA,KAAK,EAAE;AACHT,QAAAA,IAAI,EAAEA;AADH;AADR,KAHH;AAQH;;AAEDU,EAAAA,MAAM,CAACC,QAAD,EAAgB;AAClB,QAAMC,KAAK,GAAGD,QAAQ,CAACD,MAAT,CAAgBG,KAAhB,CAAsB,GAAtB,EAA2BC,GAA3B,CAA+BC,IAAI,IAAI;AACjD,aAAO;AAACX,QAAAA,QAAQ,EAAE;AAAC,WAAClB,EAAE,CAAC8B,IAAJ,cAAeD,IAAf;AAAD;AAAX,OAAP;AACH,KAFa,CAAd;AAGA,QAAME,IAAI,GAAGN,QAAQ,CAACM,IAAT,GAAgBC,QAAQ,CAACP,QAAQ,CAACM,IAAV,CAAxB,GAA0C,CAAvD;AACA,QAAME,KAAK,GAAGR,QAAQ,CAACQ,KAAT,GAAiBD,QAAQ,CAACP,QAAQ,CAACQ,KAAV,CAAzB,GAA4C,EAA1D;AAEA,WAAO/B,GAAG,CAACgC,eAAJ,CAAoB;AACvBC,MAAAA,UAAU,EAAE,oCADW;AAEvBC,MAAAA,MAAM,EAAEL,IAAI,GAAGE,KAFQ;AAGvBA,MAAAA,KAAK,EAAEA,KAHgB;AAIvBV,MAAAA,KAAK,EAAE;AACH,SAACvB,EAAE,CAACqC,EAAJ,GAASX;AADN;AAJgB,KAApB,CAAP;AAQH;;AAjD4C","sourcesContent":["// @flow\nimport {join} from \"path\";\nimport {Sequelize} from \"sequelize\";\nimport fs from 'fs';\n\nconst Op = Sequelize.Op;\n\nclass Url extends Sequelize.Model {\n}\n\n/**\n * Read and write the current crawl state to file.\n */\nexport default class SqliteCrawlStatesRepository {\n\n    constructor(projectFolder: string) {\n        const projectsPathUrls = join(projectFolder, \"urls\");\n        const databaseFile = join(projectsPathUrls, \"crawl_state.sqlite\");\n        if(!fs.existsSync(databaseFile)) {\n            throw 'Database not found.';\n        }\n\n        const sequelize = new Sequelize(`sqlite:${databaseFile}`, {logging: false});\n\n        Url.init({\n            name: Sequelize.STRING,\n            url: Sequelize.STRING,\n            title: Sequelize.STRING,\n            contents: Sequelize.STRING,\n        }, {sequelize, modelName: 'url', tableName: 'urls', timestamps: false});\n    }\n\n    // noinspection JSMethodCanBeStatic\n    /**\n     * Update a url with content and title.\n     */\n    update(name: string, title: string, contents: string) {\n        Url.update({\n            title: title,\n            contents: contents,\n        }, {\n            where: {\n                name: name\n            }\n        });\n    }\n\n    search(criteria: any) {\n        const likes = criteria.search.split(' ').map(term => {\n            return {contents: {[Op.like]: `%${term}%`}}\n        });\n        const page = criteria.page ? parseInt(criteria.page) : 0;\n        const limit = criteria.limit ? parseInt(criteria.limit) : 10;\n\n        return Url.findAndCountAll({\n            attributes: [`name`, `url`, `title`, `contents`],\n            offset: page * limit,\n            limit: limit,\n            where: {\n                [Op.or]: likes\n            }\n        });\n    }\n}\n"],"file":"SqliteCrawlStatesRepository.js"}